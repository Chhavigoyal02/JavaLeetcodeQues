class Solution {
    public int totalNQueens(int n) {
        boolean[][] board = new boolean[n][n];
		return Print(board, n, 0);
    }
    public static int Print(boolean[][] board, int tq, int row) {
		if (tq == 0) {
			return 1;
		}
        int a=0;
		for (int col = 0; col < board[0].length; col++) {
			if (isitsafe(board, row, col)) {
				board[row][col] = true;
				a+=Print(board, tq - 1, row + 1);
				board[row][col] = false;
			}
		}
        return a;
	}   
    public static boolean isitsafe(boolean[][] board, int row, int col) {
		//col
		int r =row;
		while(r>=0) {
			if(board[r][col] == true) {
				return false;
			}
			r--;
		}
		//left diagonal
		r =row;
		int c =col;
		while(r>=0 && c>=0) {
			if(board[r][c] == true) {
				return false;
			}
			r--;
			c--;
		}
		//right diagonal
		r =row;
		c =col;
		while(r>=0 && c<board[0].length) {
			if(board[r][c] == true) {
				return false;
			}
			r--;
			c++;
		}
		return true;
	}
}
