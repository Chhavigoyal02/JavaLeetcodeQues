class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result=new ArrayList<>();
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        Print(board,result,n,0);
        return result;
    }
    public static void Print(char[][] board,List<List<String>> result, int tq, int row) {
		if (tq == 0) {
			result.add(convertBoardToList(board));
            return;
		}
		for (int col = 0; col < board[0].length; col++) {
			if (isitsafe(board, row, col)) {
				board[row][col] = 'Q';
				Print(board,result, tq - 1, row + 1);
				board[row][col] = '.';
			}
		}
	}
    public static boolean isitsafe(char[][] board, int row, int col) {
		int r =row;
		while(r>=0) {
			if(board[r][col] == 'Q') {
				return false;
			}
			r--;
		}
		//left diagonal
		r =row;
		int c =col;
		while(r>=0 && c>=0) {
			if(board[r][c] == 'Q') {
				return false;
			}
			r--;
			c--;
		}
		r =row;
		c =col;
		while(r>=0 && c<board[0].length) {
			if(board[r][c] == 'Q') {
				return false;
			}
			r--;
			c++;
		}
		return true;
	}
    public static List<String> convertBoardToList(char[][] board) {
        List<String> result = new ArrayList<>();
        for (char[] row : board) {
            result.add(new String(row));
        }
        return result;
    }
}
