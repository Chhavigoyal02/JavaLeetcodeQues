class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<Integer> ll = new ArrayList<>();
		List<List<Integer>> ans= new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Print(nums,ll,ans,used);
        return ans;
    }
    public static void Print(int[] ques,List<Integer> ll,List<List<Integer>> ans,boolean[] used ) {
		if(ll.size() == ques.length) {
			ans.add(new ArrayList<>(ll));
			return;  
		}
		for (int i = 0; i < ques.length; i++) {
			if (used[i] || (i > 0 && ques[i] == ques[i - 1] && !used[i - 1])) continue;
            used[i]=true;
            ll.add(ques[i]);
            Print(ques,ll,ans,used);
            ll.remove(ll.size()-1);
            used[i]=false;
            while (i + 1 < ques.length && ques[i] == ques[i + 1]) {
                i++;
            }
		}
	}
}
