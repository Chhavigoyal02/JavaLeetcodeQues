class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return func(m-1,n-1,dp,obstacleGrid);
    }
    public static int func(int i,int j,int[][] dp,int[][] obstacleGrid){
        if(i==0 && j==0) dp[i][j]=1;
        if(i<0 || j<0) dp[i][j]=0;
        if(obstacleGrid[i][j]==1) dp[i][j]= 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=0;
        int left=0;
        if(i>0) up=func(i-1,j,dp,obstacleGrid);
        if(j>0) left= func(i,j-1,dp,obstacleGrid);
        return dp[i][j] =  up+left;
    }
}
