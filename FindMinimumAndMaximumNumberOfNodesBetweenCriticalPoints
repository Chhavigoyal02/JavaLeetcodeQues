/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        List<Integer> ll = new ArrayList<>();
        int index = 0;
        ListNode prev = null, curr = head, next = head.next;
        while (next != null) {
            if ((prev != null && curr.val > prev.val && curr.val > next.val) || 
                (prev != null && curr.val < prev.val && curr.val < next.val)) {
                ll.add(index);
            }
            prev = curr;
            curr = next;
            next = next.next;
            index++;
        }
        if (ll.size() < 2) return new int[] {-1, -1};
        int minD=Integer.MAX_VALUE;
        int maxD=ll.get(ll.size()-1)-ll.get(0);
        for (int i=1;i<ll.size();i++) {
            minD=Math.min(minD,ll.get(i)-ll.get(i-1));
        }
        return new int[] {minD,maxD};
    }
}
