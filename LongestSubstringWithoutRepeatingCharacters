class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0) return 0;
        HashMap<Character, Integer> map=new HashMap<>();
        int max=0;
        int left=0;
        for (int right=0;right<s.length();right++) {
            char ch=s.charAt(right);
            if(map.containsKey(ch)) left=Math.max(left,map.get(ch)+1);
            map.put(ch,right);
            max=Math.max(max,right-left+1);
        }
        return max;
    }
}

or 

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0) return 0;
        int winStart=0;
        int winEnd=0;
        int n=s.length();
        // HashSet<Character> set=new HashSet<>();
        HashMap<Character,Integer> map=new HashMap<>();
        int maxLen=Integer.MIN_VALUE;
        while(winEnd<n){
            char ch=s.charAt(winEnd);
            // if(set.contains(ch)){
            if(map.containsKey(ch) && map.get(ch)>=winStart){
                // while(winStart<winEnd && set.contains(ch)){
                //     set.remove(s.charAt(winStart));
                //     winStart++;
                // }
                winStart=map.get(ch)+1;
            }
            // set.add(ch);
            map.put(ch,winEnd);
            maxLen=Math.max(maxLen,winEnd-winStart+1);
            winEnd++;
        }
        return maxLen;
    }
}
