class Pair<K, V> {
    private K key;
    private V value;
    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }
    public K getKey() {
        return key;
    }
    public V getValue() {
        return value;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Map<Integer, Map<Integer, PriorityQueue<Integer>>> nodes = new TreeMap<>();
        Queue<Pair<TreeNode, Pair<Integer, Integer>>> todo = new LinkedList<>();
        todo.add(new Pair<>(root, new Pair<>(0, 0)));
        while (!todo.isEmpty()) {
            Pair<TreeNode, Pair<Integer, Integer>> p = todo.poll();
            TreeNode temp = p.getKey();
            int x = p.getValue().getKey();
            int y = p.getValue().getValue();
            nodes.computeIfAbsent(x, k -> new TreeMap<>())
                 .computeIfAbsent(y, k -> new PriorityQueue<>())
                 .add(temp.val);
            if (temp.left != null) todo.add(new Pair<>(temp.left, new Pair<>(x - 1, y + 1)));
            if (temp.right != null) todo.add(new Pair<>(temp.right, new Pair<>(x + 1, y + 1)));
        }
        List<List<Integer>> ans = new ArrayList<>();
        for (Map.Entry<Integer, Map<Integer, PriorityQueue<Integer>>> entry : nodes.entrySet()) {
            List<Integer> col = new ArrayList<>();
            for (PriorityQueue<Integer> pq : entry.getValue().values()) {
                while (!pq.isEmpty()) col.add(pq.poll());
            }
            ans.add(col);
        }
        return ans;
    }
}

