/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        return mergeK(lists, 0, lists.length - 1);
    }
    private ListNode mergeK(ListNode[] lists, int left, int right) {
    if (left == right) {
        return lists[left];
    }
    int mid = left + (right - left) / 2;
    ListNode leftList = mergeK(lists, left, mid);
    ListNode rightList = mergeK(lists, mid + 1, right);
    return merge(leftList, rightList);
}
    public static ListNode merge(ListNode list1,ListNode list2){
        ListNode h = new ListNode(100);
        ListNode t = h;
        ListNode t1 = list1;
        ListNode t2 = list2;
        while(t1!=null && t2!=null){
            if(t1.val<t2.val){
                t.next = t1;
                t =t1;
                t1 =t1.next;
            }
            else{
                t.next = t2;
                t =t2;
                t2 =t2.next;
            }
        }
         if(t1 == null){
            t.next = t2;
        }
        else{
            t.next = t1;
        }
        return h.next;
    }
}
